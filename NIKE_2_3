--Use a WITH statement to standardize all spellings of Rafa.
--Then, show the revenue generated by his fanbase for vintage items.


WITH rafa_table AS (
	SELECT *
		,CASE 
			WHEN fav_tennis_player in ('Rafa Nadal', 'Rafael Nadal', 'Rafa') THEN 'Rafa'
  		ELSE fav_tennis_player
  	END AS new_fav_player
  FROM customers
),

revenue_table AS (
SELECT 
	user_id 
  , SUM (sale_price) as total_revenue 
FROM order_items_vintage
GROUP BY user_id
) 

SELECT 
	SUM (rt.total_revenue)
FROM rafa_table raf
	INNER JOIN revenue_table rt ON raf.customer_id = rt.user_id
	WHERE 1 = 1
  	AND raf.new_fav_player = 'Rafa'


select DISTINCT fav_tennis_player from customers

--Use a WITH statement to standardize all spellings of Rafa. Do the same for Emma Raducanu.

--Then, show the revenue generated by each fanbase across the entire business.

--HINT: UNIONs also work for temp_tables
--HINT2: Use SELECT DISTINCT to find all the different spellings for Emma & Rafa first.

WITH rafa_table AS (
	SELECT *
		,CASE 
			WHEN fav_tennis_player in ('Rafa Nadal', 'Rafael Nadal', 'Rafa') THEN 'Rafa'
  		WHEN fav_tennis_player in ('Emma Raducanu', 'Emma Radunanucanunu') THEN 'Emma'
  		ELSE fav_tennis_player
  	END AS new_fav_player
  FROM customers
),

all_orders AS (
  SELECT * FROM order_items
  UNION ALL 
  SELECT * FROM order_items_vintage
) 

SELECT 
	raf.new_fav_player
	,SUM (ao.sale_price) AS total_revenue
FROM rafa_table raf 
	INNER JOIN all_orders ao ON raf.customer_id = ao.user_id
WHERE raf.new_fav_player IN ('Rafa', 'Emma')
GROUP BY raf.new_fav_player

-- 
-- Standardize the names of Rafa & Emma Raducanu. 

-- Then, give me one output showing only the top three revenue generating product names per fanbase with the generated revenue.

WITH rafa_table AS (
	SELECT *
		,CASE 
			WHEN fav_tennis_player in ('Rafa Nadal', 'Rafael Nadal', 'Rafa') THEN 'Rafa'
  		WHEN fav_tennis_player in ('Emma Raducanu', 'Emma Radunanucanunu') THEN 'Emma'
  		ELSE fav_tennis_player
  	END AS new_fav_player
  FROM customers
),

all_orders AS (
SELECT *
	, COALESCE (product_id, 'P012') AS clean_product
FROM order_items_vintage
UNION ALL 
SELECT *
	,COALESCE (product_id, 'P003') AS clean_product
FROM order_items
),

rafa_3 AS (
SELECT 
	rt.new_fav_player
  , pr.product_name
	, SUM (ao.sale_price)
  
FROM all_orders ao 
	INNER JOIN rafa_table rt ON ao.user_id = rt.customer_id
  INNER JOIN products pr ON ao.product_id = pr.product_id
WHERE rt.new_fav_player IN ('Rafa')
GROUP BY rt.new_fav_player, pr.product_name
ORDER BY 1, 3 DESC
LIMIT 3
), 

emma_3 AS (
  SELECT 
	rt.new_fav_player
  , pr.product_name
	, SUM (ao.sale_price)
FROM all_orders ao 
	INNER JOIN rafa_table rt ON ao.user_id = rt.customer_id
  INNER JOIN products pr ON ao.product_id = pr.product_id
WHERE rt.new_fav_player IN ('Emma')
GROUP BY rt.new_fav_player, pr.product_name
ORDER BY 1, 3 DESC 
LIMIT 3  
)

SELECT * FROM rafa_3
UNION ALL 
SELECT * FROM emma_3



WITH total_customers AS (
  
SELECT state,
         age_group,
         COUNT(customer_id) AS num_customers
FROM customers 
GROUP BY state,
         age_group 
  )
  
SELECT *,
			 num_customers - MAX (num_customers) OVER (PARTITION BY state ORDER BY num_customers DESC) AS rank

FROM total_customers



-- Question #1: 
-- What are the top customers by the total amount of revenue 
--(aggregate of the sales price) for the Nike Official and Nike Vintage business units combined?

-- Include the customer id, the total revenue, and the number of order items each customer has purchased. 

-- Only include orders that have not been cancelled or returned.

customers total_revenue  number_oforder_item


WITH comon_table AS (
	SELECT * 
  FROM order_items
  UNION ALL 
  SELECT * 
  FROM order_items_vintage
),  

rev_user_table AS (
SELECT 
	user_id
  , COUNT (order_item_id) AS total_orders
  , SUM (sale_price) AS total_revenue 
FROM comon_table
GROUP BY user_id
)

SELECT 
	rut.user_id
  , rut.total_orders
  , rut.total_revenue
FROM rev_user_table rut 
	INNER JOIN orders od ON rut.user_id = od.user_id
 WHERE od.status NOT IN ('Cancelled', 'Returned')
ORDER BY 3 DESC


-- Question #2: 
-- Combine the order item data from Nike Official and Nike Vintage, and segment customers into three segments.
-- (1) Customers that only purchased a single product; 
-- (2) Customers that purchased more than 1 product; 
-- (3) “Missing Data” (if none of these conditions match)

-- How many customers and how much revenue (aggregate of the sales price) falls in each segment?

-- Only include orders that have not been cancelled or returned.
-- To make you think: what type of data could fall under the third bucket?

WITH comon_table AS (
	SELECT * 
  FROM order_items oi
  UNION ALL 
  SELECT * 
  FROM order_items_vintage oiv
),

temp_product AS (
SELECT ct.user_id
  , SUM (ct.sale_price) AS total_revenue
	, COUNT (ct.product_id) AS products
  , CASE WHEN COUNT (ct.product_id) = 1 THEN 'single'
  		 WHEN COUNT (ct.product_id) > 1 THEN 'more than 1'
       ELSE 'missing data'
  END AS purchases 
FROM comon_table ct
INNER JOIN orders ord ON ct.order_id = ord.order_id
  WHERE ord.status NOT IN ('Cancelled', 'Returned')
GROUP BY ct.user_id
) 

SELECT 
	purchases
	, COUNT (user_id) AS users 
  , SUM (total_revenue) as all_revenue
FROM temp_product 
GROUP BY purchases


-- Question #3: 
-- The Nike Official leadership team is keen to understand what % of the total revenue per state
--is coming from the Nike Official business.

-- Create list that shows the total revenue (aggregate of the sales price) per state, 
--the revenue generated from Nike Official, and the % of the Nike Official revenue compared to the total revenue for every state.

-- Only include orders that have not been cancelled or returned and order the tableto show the state 
--with the highest amount of revenue first, even is there is no information available about the state.

revenue per state 
reneue of nike of
% nike of total 

WITH comon_table AS (
	SELECT * 
  FROM order_items oi
  UNION ALL 
  SELECT * 
  FROM order_items_vintage oiv
), 

 customer_table AS (
   SELECT 
   	*
   	, COALESCE (state, 'Miss Data') AS states
   FROM customers
),

tr_table AS (
SELECT 
	cus.states
  , SUM (ct.sale_price) AS total_revenue
FROM comon_table ct 
INNER JOIN orders ON ct.order_id = orders.order_id  
INNER JOIN customer_table cus ON ct.user_id = cus.customer_id
WHERE orders.status NOT IN ('Cancelled', 'Returned')  
GROUP BY cus.states

), 

nor_table AS ( 
  SELECT 
  	cus.states
  	, SUM (sale_price) AS nor_revenue
  FROM order_items oi
  INNER JOIN orders ON oi.order_id = orders.order_id  
  INNER JOIN customer_table cus ON oi.user_id = cus.customer_id
  WHERE orders.status NOT IN ('Cancelled', 'Returned')
  GROUP BY   cus.states
) 

SELECT 
	tr_table.states
  , tr_table.total_revenue AS Nike_revenue
  , nor_table.nor_revenue AS Nike_Official_revenue
  , (nor_table.nor_revenue/tr_table.total_revenue)*100 AS persent
FROM tr_table 
INNER JOIN nor_table ON tr_table.states = nor_table.states
ORDER BY 2 DESC



-- Question #4: 
-- Create an overview of the orders by state. Summarize for each customer the number of orders that have 
--status of Complete, or Canceled (Returned of Cancelled).

-- Exclude all orders that are still in progress (Processing or Shipped) and only include orders
--for customers that have a state available.


WITH temp_table1 AS (
SELECT 
	cus.state
	, COUNT (ord.order_id) AS orders
FROM customers cus 
INNER JOIN orders ord ON cus.customer_id = ord.user_id
WHERE 1=1 
	AND ord.status NOT IN ('Processing', 'Shipped')
GROUP BY cus.state
),

temp_table2 AS (
SELECT 
	cus.state
	, COUNT (ord.order_id) AS COMPLETED
FROM customers cus 
INNER JOIN orders ord ON cus.customer_id = ord.user_id
WHERE 1=1 
	AND ord.status = 'Complete'
GROUP BY cus.state
), 

temp_table3 AS (
SELECT 
	cus.state
	, COUNT (ord.order_id) AS CANCELLED
FROM customers cus 
INNER JOIN orders ord ON cus.customer_id = ord.user_id
WHERE 1=1 
	AND ord.status IN ('Returned', 'Cancelled')
GROUP BY cus.state
)

SELECT 
	tt1.state
  , tt1.orders
  , tt2.COMPLETED 
  , tt3.CANCELLED
FROM temp_table1 tt1
INNER JOIN temp_table2 tt2 ON tt1.state = tt2.state
INNER JOIN temp_table3 tt3 ON tt1.state = tt3.state
